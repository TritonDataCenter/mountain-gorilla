#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2018, Joyent, Inc.
#

# Upload the bits dir to Manta
if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: '
    set -o xtrace
fi
set -o errexit

TOP=$(cd $(dirname $0)/../; pwd)
BITS_DIR=bits/
PATH=$PATH:${TOP}/node_modules/manta/bin
UPLOAD_LOG=${TOP}/upload.log

# --- Manta config
if [[ -z "$MANTA_KEY_ID" ]]; then
    export MANTA_KEY_ID=`ssh-keygen -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n'`
fi
if [[ -z "$MANTA_URL" ]]; then
    export MANTA_URL=https://us-east.manta.joyent.com
fi
if [[ -z "$MANTA_USER" ]]; then
    export MANTA_USER="Joyent_Dev";
fi


function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

function errexit {
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1 at line $2"
}

function print_help() {
    echo "Usage:"
    echo "  ./tools/mantaput-bits BRANCH TRY-BRANCH TIMESTAMP UPLOAD-BASE-DIR [SUBDIRS...]"
    echo ""
    echo "Upload bits to Manta. The UPLOAD-BASE-DIR is presumed to be either a subdir of"
    echo "\${MANTA_USER}/stor or (if starts with '/') a path under \${MANTA_USER}"
}

function msg() {
    echo $* | tee -a $UPLOAD_LOG
}

trap 'errexit $? $LINENO' EXIT

BRANCH=$1
shift
TRY_BRANCH=$1
shift
TIMESTAMP=$1
shift
UPLOAD_BASE_DIR=$1
shift
SUBDIRS=$*

if [[ ${UPLOAD_BASE_DIR:0:1} != '/' ]]; then
    # if it starts with a / we assume it's /stor/<something> or
    # /public/<something> if not, we prepend /stor
    UPLOAD_BASE_DIR="/stor/${UPLOAD_BASE_DIR}"
fi

UPLOAD_BRANCH=$TRY_BRANCH
if [[ -z "$UPLOAD_BRANCH" ]]; then
    UPLOAD_BRANCH=$BRANCH
fi

upload_subdir=$UPLOAD_BRANCH-$TIMESTAMP

start_time=$(date +%s)
msg "Uploading bits to /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}"

# need to create the directory structure first
if [[ -z "$SUBDIRS" ]]; then
    subs=$(find $BITS_DIR -type d)
    files=$(find $BITS_DIR -type f)
else
    for subdir in $SUBDIRS; do
        if [[ -d $BITS_DIR/$subdir ]]; then
          subs="$subs $(find $BITS_DIR/$subdir -type d)"
          files="$files $(find $BITS_DIR/$subdir -type f)"
        fi
    done
fi

for sub in $subs; do
    mmkdir -v -p /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}/${sub#${BITS_DIR}}
done

md5sums=""
# now we can upload the files
for file in $files; do
    manta_object=/${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}/${file#$BITS_DIR}

    local_md5_line=$(md5sum ${file})
    local_md5=$(echo "${local_md5_line}" | cut -d ' ' -f1)
    manta_md5=$(mmd5 ${manta_object} | cut -d ' ' -f1)

    if [[ -n ${manta_md5} && ${manta_md5} != ${local_md5} ]]; then
        fatal "${manta_object} exists but MD5 does not match ${file}"
    fi

    if [[ -z ${manta_md5} ]]; then
        # file doesn't exist, upload it

        echo ${MANTA_URL}/${manta_object} >>$UPLOAD_LOG
        mput -v -f ${file} ${manta_object}
        [[ $? == 0 ]] || fatal "Failed to upload ${file} to ${manta_object}"
    else
        msg "${manta_object} already exists and matches local file, skipping upload."
    fi
    md5sums="${md5sums}${local_md5_line}\n"
done

# upload the md5sums and config.mk
echo -e $md5sums | mput -v -H 'content-type: text/plain' /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}/md5sums.txt
mput -v -f $BITS_DIR/config.mk /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}/config.mk

# now update the branch latest link
echo "/${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}" | mput -v -H 'content-type: text/plain' /${MANTA_USER}${UPLOAD_BASE_DIR}/${UPLOAD_BRANCH}-latest
# If this is a bi-weekly release branch, also update latest-release link
if [[ $UPLOAD_BRANCH =~ ^release- ]]; then
    echo "/${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir}" | mput -v -H 'content-type: text/plain' /${MANTA_USER}${UPLOAD_BASE_DIR}/latest-release
fi

end_time=$(date +%s)
elapsed=$((${end_time} - ${start_time}))
msg "Uploaded to /${MANTA_USER}${UPLOAD_BASE_DIR}/${upload_subdir} in ${elapsed} seconds"
