#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019, Joyent, Inc.
#

#
# Quick hack script that looks in /Joyent_Dev/public/builds/...
# for SDC components for which there is no "release-YYYYMMDD"
# build. These are ones that you may need to manually kick
# off in jenkins.
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


#---- globals

TOP=$(cd $(dirname $0)/../; pwd)


#---- support stuff

function fatal
{
    echo "$0: fatal error: $*"
    exit 1
}

function usage() {
    if [[ -n "$1" ]]; then
        echo "error: $1"
        echo ""
    fi
    echo "usage:"
    echo "  ls-missing-release-builds [-s] RELEASE [TARGETS...]"
    echo "   -s     Do a smartos-only build"
    echo "          (this influences how we launch the platform build)"
    echo ""
    echo "example:"
    echo "  ls-missing-release-builds release-20140703"
    exit 1
}

# Specify the type of platform build to do.
PLATFORM_BUILD_FLAVOR='smartos-and-triton'

#---- mainline

while getopts 'sh' opt; do
    case $opt in
    s) PLATFORM_BUILD_FLAVOR=smartos;;
    h) usage;;
    :) usage "-$OPTARG requires an argument";;
    \?) usage "illegal option: -$OPTARG";;
    esac
    shift
done

release=$1
if [[ -z "$release" ]]; then
    usage "missing 'RELEASE' argument given"
fi
if [[ -z "$(echo $release | grep '^release-[0-9]\{8\}$' || true)" ]]; then
    usage "given RELEASE, '$release', doesn't match /release-\d{8}/"
fi
shift

targets="$*"
if [[ -z "$targets" ]]; then
    (cd $TOP && JOYENT_BUILD=true bash <targets.json.in >targets.json)
    targets=$($TOP/tools/json -f $TOP/targets.json -Ma key value.public \
        | grep -v '^sdcsso ' \
        | grep -v '^headnode-debug ' \
        | grep -v '^headnode-joyent-debug ')
fi

# Ensure mls is setup properly at all.
mls /Joyent_Dev/public/builds >/dev/null \
    || fatal "cannot list /Joyent_Dev/public/builds"

echo "$targets" | while read target public; do
    if [[ "$public" == "true" ]]; then
        latest_mpath=/Joyent_Dev/public/builds/$target/$release-latest
    else
        latest_mpath=/Joyent_Dev/stor/builds/$target/$release-latest
    fi

    case $target in
        "platform"|"platform-debug")
            PLAT_FLAVOR_ARG="-F $PLATFORM_BUILD_FLAVOR"
            ;;
        *)
            PLAT_FLAVOR_ARG=""
            ;;
    esac

    latest=$(mls $latest_mpath 2>/dev/null || true)
    if [[ -z "$latest" ]]; then
        echo "# $target, '$latest_mpath' does not exist" >&2
        echo "./tools/launch-build ${PLAT_FLAVOR_ARG} -b $release $target"
    fi
done
